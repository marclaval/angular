package(default_visibility = ["//visibility:public"])

load("//tools:defaults.bzl", "ng_module", "ts_library")
load("//tools/symbol-extractor:index.bzl", "js_expected_symbol_test")
load("//packages/bazel/src:ng_rollup_bundle.bzl", "ng_rollup_bundle")
load("@build_bazel_rules_nodejs//:defs.bzl", "jasmine_node_test")
load("//tools/http-server:http_server.bzl", "http_server")

ng_module(
    name = "hello_world",
    srcs = ["index.ts"],
    tags = ["ivy-only"],
    deps = [
        "//packages/core",
    ],
)

ng_rollup_bundle(
    name = "bundle",
    # TODO(alexeagle): This is inconsistent.
    # We try to teach users to always have their workspace at the start of a
    # path, to disambiguate from other workspaces.
    # Here, the rule implementation is looking in an execroot where the layout
    # has an "external" directory for external dependencies.
    # This should probably start with "angular/" and let the rule deal with it.
    entry_point = "packages/core/test/bundling/hello_world/index.js",
    tags = ["ivy-only"],
    deps = [
        ":hello_world",
        "//packages/core",
    ],
)

ts_library(
    name = "test_lib",
    testonly = 1,
    srcs = glob(["*_spec.ts"]),
    deps = [
        "//packages:types",
        "//packages/core/testing",
        "//packages/private/testing",
    ],
)

jasmine_node_test(
    name = "test",
    data = [
        ":bundle",
        ":bundle.js",
        ":bundle.min.js.br",
        ":bundle.min_debug.js",
    ],
    tags = [
        "ivy-jit",
        "ivy-local",
        "ivy-only",
    ],
    deps = [":test_lib"],
)

js_expected_symbol_test(
    name = "symbol_test",
    src = ":bundle.min_debug.js",
    golden = ":bundle.golden_symbols.json",
    tags = [
        "ivy-local",
        "ivy-only",
    ],
)

http_server(
    name = "devserver",
    data = [
        "index.html",
        ":bundle.min.js",
        ":bundle.min_debug.js",
    ],
)

h=function(e){return e[e.Important=1]="Important",e[e.DashCase=2]="DashCase",e}({}),w={createRenderer:function(e,n){return N},begin:function(){},end:function(){}},b={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},N={data:{},destroyNode:null,destroy:function(){},createElement:function(e,n){return null==n?document.createElement(e):document.createElementNS(n,e)},createComment:function(e){return document.createComment(e)},createText:function(e){return document.createTextNode(e)},appendChild:function(e,n){e.appendChild(n)},insertBefore:function(e,n,t){e.insertBefore(n,t,!0)},removeChild:function(e,n){e.removeChild(n)},selectRootElement:function(e){return"string"==typeof e?document.querySelector(e):e},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},setAttribute:function(e,n,t,o){if(o){var r=b[o];r?e.setAttributeNS(r,o+":"+n,t):e.setAttributeNS(o,n,t)}else e.setAttribute(n,t)},removeAttribute:function(e,n,t){if(t){var o=b[t];o?e.removeAttributeNS(o,n):e.removeAttribute(t+":"+n)}else e.removeAttribute(n)},addClass:function(e,n){e.classList.add(n)},removeClass:function(e,n){e.classList.remove(n)},setStyle:function(e,n,t,o){o&h.DashCase?e.style.setProperty(n,t,o&h.Important?"important":""):e.style[n]=t},removeStyle:function(e,n,t){t&h.DashCase?e.style.removeProperty(n):e.style[n]=""},setProperty:function(e,n,t){e[n]=t},setValue:function(e,n){e.nodeValue=n},listen:function(e,n,t){if("string"!=typeof e)return e.addEventListener(n,t,!1),function(){return e.removeEventListener(n,t,!1)};throw new Error("Renderer2Adapter.listen doesn't support event target as a string, use an element instead.")}};